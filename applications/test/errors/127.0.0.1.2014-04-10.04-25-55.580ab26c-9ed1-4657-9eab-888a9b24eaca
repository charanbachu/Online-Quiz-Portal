(dp1
S'output'
p2
S"<type 'exceptions.IndexError'> list index out of range"
p3
sS'layer'
p4
S'/home/maneesh/Desktop/charan/ITWS-2/web2py/applications/test/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to THE QUIZ!")\n    return dict()\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n@auth.requires_membership(\'manage users\')\ndef manage_users():\n    grid = SQLFORM.grid(db.auth_user)\n    return locals()\n\nimport re\n\n@auth.requires_login()\ndef mainpage():\n    secret = db(db.secret.name == auth.user.first_name).select()\n    auth_count = db(db.auth_user.id >= 0).count()\n    sorted_list = sorted(db(db.secret.id >= 0).select(), key=lambda k: k[\'score\']) \n    if(secret[0].Test == 1):\n\tif request.vars:\t\t\t\t\t\t\t\t\n\t    x=DIV()\n\t    p=request.vars[\'search_name\']\n\t    for i in range(auth_count):\n\t \tj=auth_count-i-1\t\t\n   \t        if(re.match(p,sorted_list[i].name)):\n\t\t    x=DIV(DIV(CENTER(j+1),_id="rec1",_style="float:left;width:20%;"),\n\t\t    DIV(CENTER(sorted_list[i].name),_id="rec2",_style="float: left; width: 110px; padding-left: 5px; padding-right: 5px; margin-left: 0px;"),\n\t\t    DIV(CENTER(sorted_list[i].score),_id="rec3",_style="float: left; width: 50px; padding-left: 0px;"),BR(),x)\n\t    return x\t\n\tif(secret[0].quesstatus - 1 == db(db.Questions.id > 0).count()):\n\t    db(db.secret.name == auth.user.first_name).update(Test = 0)\n            redirect(URL(\'congrats\'))\n\tquesnum = secret[0].quesstatus\n\tscore = secret[0].score\n    \tquestion = db(db.Questions.quesno == quesnum).select()                 \n\tans=question[0].answer\n        if request.args:                \t\t\t\t\t\t\n            if(request.args[0]== "None"):\n                secret[0].update_record(quesstatus= quesnum + 1)\n                secret[0].update_record(unanswered= secret[0].unanswered + 1)\n                redirect(URL(\'mainpage\'))\n       \t    elif(request.args[0]== ans):\n                score=score+10\n\t\tsecret[0].update_record(correct= secret[0].correct + 1)\n            elif(request.args[0]!= ans):\n                score=score-10\n\t\tsecret[0].update_record(wrong= secret[0].wrong + 1)\n            secret[0].update_record(score=score)\n\t    secret[0].update_record(quesstatus= quesnum + 1)\n            redirect(URL(\'mainpage\'))                 \n        return dict(name=auth.user.first_name,secret=secret[0],question=question[0],count = auth_count,sorted_list = sorted_list)\n    else:\n\tredirect(URL(\'congrats\'))\n\n@auth.requires_login()\ndef main1():\n    return dict()\n@auth.requires_login()\ndef congrats():\n    secret = db(db.secret.name == auth.user.first_name).select()\n    return dict(name = auth.user.first_name, secret = secret[0])\n\nresponse._vars=response._caller(mainpage)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/maneesh/Desktop/charan/ITWS-2/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/maneesh/Desktop/charan/ITWS-2/web2py/applications/test/controllers/default.py", line 133, in <module>\n  File "/home/maneesh/Desktop/charan/ITWS-2/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/maneesh/Desktop/charan/ITWS-2/web2py/gluon/tools.py", line 3259, in f\n    return action(*a, **b)\n  File "/home/maneesh/Desktop/charan/ITWS-2/web2py/applications/test/controllers/default.py", line 89, in mainpage\n    if(secret[0].Test == 1):\n  File "/home/maneesh/Desktop/charan/ITWS-2/web2py/gluon/dal.py", line 10767, in __getitem__\n    row = self.records[i]\nIndexError: list index out of range\n'
p11
s.